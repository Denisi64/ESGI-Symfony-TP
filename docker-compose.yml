version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: symfony_app
    working_dir: /var/www/symfony
    volumes:
      - .:/var/www/symfony
    environment:
      - PHP_INI_DIR=/usr/local/etc/php
      - XDEBUG_MODE=debug
      - XDEBUG_CONFIG="client_host=host.docker.internal"
      - UID=${UID:-1000}
      - GID=${GID:-1000}
    user: "${UID}:${GID}"
    networks:
      - symfony_network

  # Service pour Nginx
  nginx:
    image: nginx:alpine
    container_name: symfony_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - .:/var/www/symfony
    depends_on:
      - app
    networks:
      - symfony_network

  # Service pour PostgreSQL
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    container_name: symfony_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    networks:
      - symfony_network

  # Adminer - alternative Ã  phpMyAdmin pour PostgreSQL
  adminer:
    image: adminer
    container_name: symfony_adminer
    environment:
      ADMINER_DEFAULT_SERVER: database
    ports:
      - "8082:8080"  # Utilisation du port 8082 local pour Adminer
    depends_on:
      - database
    networks:
      - symfony_network


volumes:
  database_data:

networks:
  symfony_network:
    driver: bridge
